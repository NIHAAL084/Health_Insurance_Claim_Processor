[project]
name = "health-insurance-claim-processor"
version = "0.1.0"
description = "An agentic backend pipeline that processes medical insurance claim documents using AI tools"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "google-adk>=1.3.0",
    "google-genai>=1.20.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "python-multipart>=0.0.9",
    "pypdf>=5.1.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.28.1",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "redis>=5.0.0",
    "asyncpg>=0.29.0",
    "gunicorn>=22.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.hatch.build.targets.wheel]
packages = ["src/health_insurance_claim_processor"]

[project.scripts]
claim-processor = "health_insurance_claim_processor.main:main"

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src"]
exclude = ["tests", "docs"]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "ISC", "ICN", "G", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PGH", "PL", "TRY", "FLY", "NPY", "RUF"]
ignore = [
    "ANN101",   # Missing type annotation for self in method
    "ANN102",   # Missing type annotation for cls in classmethod
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",   # Missing trailing comma
    "ISC001",   # Implicitly concatenated string literals on one line
    "PLR0913",  # Too many arguments to function call
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of assert detected
    "S301",     # Pickle usage
    "S311",     # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "S603",     # subprocess call: check for execution of untrusted input
    "S607",     # Starting a process with a partial executable path
    "SIM108",   # Use ternary operator instead of if-else-block
    "TRY003",   # Avoid specifying long messages outside the exception class
    "UP007",    # Use X | Y for type annotations
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["ANN", "S", "PLR2004"]
"**/__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["health_insurance_claim_processor"]
force-single-line = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
